
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model books
 */

export type books = {
  id_books: number
  title: string | null
  publisher: string | null
  author: string | null
  ISBN: number | null
  pages: number | null
  description: string | null
  cover__book: string | null
  id_category: number | null
  id_user: number | null
  id_rate: number | null
}

/**
 * Model borrow
 */

export type borrow = {
  id_borrow: number
  start_date: Date | null
  end_date: Date | null
  id_books: number | null
  id_user: number | null
}

/**
 * Model category
 */

export type category = {
  id_category: number
  name_category: string | null
  cover_category: string | null
}

/**
 * Model discussion
 */

export type discussion = {
  id_discussion: number
  diskusi: string | null
  id_books: number | null
  id_user: number | null
}

/**
 * Model user
 */

export type user = {
  id_user: number
  name_user: string | null
  username: string | null
  email: string | null
  password: string | null
  NIK: number | null
  foto_user: string | null
  address: string | null
  no_hp: string | null
  gender: string | null
  birth_date: Date | null
}

/**
 * Model rating
 */

export type rating = {
  id_rating: number
  rating: number | null
  id_books: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Books
 * const books = await prisma.books.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Books
   * const books = await prisma.books.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.books`: Exposes CRUD operations for the **books** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.books.findMany()
    * ```
    */
  get books(): Prisma.booksDelegate<GlobalReject>;

  /**
   * `prisma.borrow`: Exposes CRUD operations for the **borrow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Borrows
    * const borrows = await prisma.borrow.findMany()
    * ```
    */
  get borrow(): Prisma.borrowDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<GlobalReject>;

  /**
   * `prisma.discussion`: Exposes CRUD operations for the **discussion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discussions
    * const discussions = await prisma.discussion.findMany()
    * ```
    */
  get discussion(): Prisma.discussionDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.ratingDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.18.0
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    books: 'books',
    borrow: 'borrow',
    category: 'category',
    discussion: 'discussion',
    user: 'user',
    rating: 'rating'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model books
   */


  export type AggregateBooks = {
    count: BooksCountAggregateOutputType | null
    avg: BooksAvgAggregateOutputType | null
    sum: BooksSumAggregateOutputType | null
    min: BooksMinAggregateOutputType | null
    max: BooksMaxAggregateOutputType | null
  }

  export type BooksAvgAggregateOutputType = {
    id_books: number
    ISBN: number | null
    pages: number | null
    id_category: number | null
    id_user: number | null
    id_rate: number | null
  }

  export type BooksSumAggregateOutputType = {
    id_books: number
    ISBN: number | null
    pages: number | null
    id_category: number | null
    id_user: number | null
    id_rate: number | null
  }

  export type BooksMinAggregateOutputType = {
    id_books: number
    title: string | null
    publisher: string | null
    author: string | null
    ISBN: number | null
    pages: number | null
    description: string | null
    cover__book: string | null
    id_category: number | null
    id_user: number | null
    id_rate: number | null
  }

  export type BooksMaxAggregateOutputType = {
    id_books: number
    title: string | null
    publisher: string | null
    author: string | null
    ISBN: number | null
    pages: number | null
    description: string | null
    cover__book: string | null
    id_category: number | null
    id_user: number | null
    id_rate: number | null
  }

  export type BooksCountAggregateOutputType = {
    id_books: number
    title: number | null
    publisher: number | null
    author: number | null
    ISBN: number | null
    pages: number | null
    description: number | null
    cover__book: number | null
    id_category: number | null
    id_user: number | null
    id_rate: number | null
    _all: number
  }


  export type BooksAvgAggregateInputType = {
    id_books?: true
    ISBN?: true
    pages?: true
    id_category?: true
    id_user?: true
    id_rate?: true
  }

  export type BooksSumAggregateInputType = {
    id_books?: true
    ISBN?: true
    pages?: true
    id_category?: true
    id_user?: true
    id_rate?: true
  }

  export type BooksMinAggregateInputType = {
    id_books?: true
    title?: true
    publisher?: true
    author?: true
    ISBN?: true
    pages?: true
    description?: true
    cover__book?: true
    id_category?: true
    id_user?: true
    id_rate?: true
  }

  export type BooksMaxAggregateInputType = {
    id_books?: true
    title?: true
    publisher?: true
    author?: true
    ISBN?: true
    pages?: true
    description?: true
    cover__book?: true
    id_category?: true
    id_user?: true
    id_rate?: true
  }

  export type BooksCountAggregateInputType = {
    id_books?: true
    title?: true
    publisher?: true
    author?: true
    ISBN?: true
    pages?: true
    description?: true
    cover__book?: true
    id_category?: true
    id_user?: true
    id_rate?: true
    _all?: true
  }

  export type BooksAggregateArgs = {
    /**
     * Filter which books to aggregate.
    **/
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<booksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned books
    **/
    count?: true | BooksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: BooksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: BooksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: BooksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: BooksMaxAggregateInputType
  }

  export type GetBooksAggregateType<T extends BooksAggregateArgs> = {
    [P in keyof T & keyof AggregateBooks]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooks[P]>
      : GetScalarType<T[P], AggregateBooks[P]>
  }


    
    
  export type BooksGroupByArgs = {
    where?: booksWhereInput
    orderBy?: Enumerable<booksOrderByInput>
    by: Array<BooksScalarFieldEnum>
    having?: booksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: BooksCountAggregateInputType | true
    avg?: BooksAvgAggregateInputType
    sum?: BooksSumAggregateInputType
    min?: BooksMinAggregateInputType
    max?: BooksMaxAggregateInputType
  }


  export type BooksGroupByOutputType = {
    id_books: number
    title: string | null
    publisher: string | null
    author: string | null
    ISBN: number | null
    pages: number | null
    description: string | null
    cover__book: string | null
    id_category: number | null
    id_user: number | null
    id_rate: number | null
    count: BooksCountAggregateOutputType | null
    avg: BooksAvgAggregateOutputType | null
    sum: BooksSumAggregateOutputType | null
    min: BooksMinAggregateOutputType | null
    max: BooksMaxAggregateOutputType | null
  }

  type GetBooksGroupByPayload<T extends BooksGroupByArgs> = Promise<Array<
    PickArray<BooksGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof BooksGroupByOutputType))]: GetScalarType<T[P], BooksGroupByOutputType[P]>
    }
  >>
    

  export type booksSelect = {
    id_books?: boolean
    title?: boolean
    publisher?: boolean
    author?: boolean
    ISBN?: boolean
    pages?: boolean
    description?: boolean
    cover__book?: boolean
    id_category?: boolean
    id_user?: boolean
    id_rate?: boolean
    category?: boolean | categoryArgs
    user?: boolean | userArgs
    discussion?: boolean | discussionFindManyArgs
    rating?: boolean | ratingFindManyArgs
  }

  export type booksInclude = {
    category?: boolean | categoryArgs
    user?: boolean | userArgs
    discussion?: boolean | discussionFindManyArgs
    rating?: boolean | ratingFindManyArgs
  }

  export type booksGetPayload<
    S extends boolean | null | undefined | booksArgs,
    U = keyof S
      > = S extends true
        ? books
    : S extends undefined
    ? never
    : S extends booksArgs | booksFindManyArgs
    ?'include' extends U
    ? books  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'category'
        ? categoryGetPayload<S['include'][P]> | null :
        P extends 'user'
        ? userGetPayload<S['include'][P]> | null :
        P extends 'discussion'
        ? Array < discussionGetPayload<S['include'][P]>>  :
        P extends 'rating'
        ? Array < ratingGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof books ?books [P]
  : 
          P extends 'category'
        ? categoryGetPayload<S['select'][P]> | null :
        P extends 'user'
        ? userGetPayload<S['select'][P]> | null :
        P extends 'discussion'
        ? Array < discussionGetPayload<S['select'][P]>>  :
        P extends 'rating'
        ? Array < ratingGetPayload<S['select'][P]>>  : never
  } 
    : books
  : books


  type booksCountArgs = Merge<
    Omit<booksFindManyArgs, 'select' | 'include'> & {
      select?: BooksCountAggregateInputType | true
    }
  >

  export interface booksDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Books that matches the filter.
     * @param {booksFindUniqueArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends booksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, booksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'books'> extends True ? CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>> : CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>

    /**
     * Find the first Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindFirstArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends booksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, booksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'books'> extends True ? CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>> : CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.books.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.books.findMany({ take: 10 })
     * 
     * // Only select the `id_books`
     * const booksWithId_booksOnly = await prisma.books.findMany({ select: { id_books: true } })
     * 
    **/
    findMany<T extends booksFindManyArgs>(
      args?: SelectSubset<T, booksFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<books>>, PrismaPromise<Array<booksGetPayload<T>>>>

    /**
     * Create a Books.
     * @param {booksCreateArgs} args - Arguments to create a Books.
     * @example
     * // Create one Books
     * const Books = await prisma.books.create({
     *   data: {
     *     // ... data to create a Books
     *   }
     * })
     * 
    **/
    create<T extends booksCreateArgs>(
      args: SelectSubset<T, booksCreateArgs>
    ): CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>>

    /**
     * Delete a Books.
     * @param {booksDeleteArgs} args - Arguments to delete one Books.
     * @example
     * // Delete one Books
     * const Books = await prisma.books.delete({
     *   where: {
     *     // ... filter to delete one Books
     *   }
     * })
     * 
    **/
    delete<T extends booksDeleteArgs>(
      args: SelectSubset<T, booksDeleteArgs>
    ): CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>>

    /**
     * Update one Books.
     * @param {booksUpdateArgs} args - Arguments to update one Books.
     * @example
     * // Update one Books
     * const books = await prisma.books.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends booksUpdateArgs>(
      args: SelectSubset<T, booksUpdateArgs>
    ): CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>>

    /**
     * Delete zero or more Books.
     * @param {booksDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.books.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends booksDeleteManyArgs>(
      args?: SelectSubset<T, booksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const books = await prisma.books.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends booksUpdateManyArgs>(
      args: SelectSubset<T, booksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Books.
     * @param {booksUpsertArgs} args - Arguments to update or create a Books.
     * @example
     * // Update or create a Books
     * const books = await prisma.books.upsert({
     *   create: {
     *     // ... data to create a Books
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Books we want to update
     *   }
     * })
    **/
    upsert<T extends booksUpsertArgs>(
      args: SelectSubset<T, booksUpsertArgs>
    ): CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>>

    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.books.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends booksCountArgs>(
      args?: Subset<T, booksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BooksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BooksAggregateArgs>(args: Subset<T, BooksAggregateArgs>): PrismaPromise<GetBooksAggregateType<T>>

    /**
     * Group by Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BooksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BooksGroupByArgs['orderBy'] }
        : { orderBy?: BooksGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BooksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBooksGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for books.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__booksClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    category<T extends categoryArgs = {}>(args?: Subset<T, categoryArgs>): CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>;

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    discussion<T extends discussionFindManyArgs = {}>(args?: Subset<T, discussionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<discussion>>, PrismaPromise<Array<discussionGetPayload<T>>>>;

    rating<T extends ratingFindManyArgs = {}>(args?: Subset<T, ratingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<rating>>, PrismaPromise<Array<ratingGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * books findUnique
   */
  export type booksFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * Throw an Error if a books can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which books to fetch.
    **/
    where: booksWhereUniqueInput
  }


  /**
   * books findFirst
   */
  export type booksFindFirstArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * Throw an Error if a books can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which books to fetch.
    **/
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<booksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for books.
    **/
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of books.
    **/
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * books findMany
   */
  export type booksFindManyArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * Filter, which books to fetch.
    **/
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<booksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing books.
    **/
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * books create
   */
  export type booksCreateArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * The data needed to create a books.
    **/
    data: XOR<booksCreateInput, booksUncheckedCreateInput>
  }


  /**
   * books update
   */
  export type booksUpdateArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * The data needed to update a books.
    **/
    data: XOR<booksUpdateInput, booksUncheckedUpdateInput>
    /**
     * Choose, which books to update.
    **/
    where: booksWhereUniqueInput
  }


  /**
   * books updateMany
   */
  export type booksUpdateManyArgs = {
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyInput>
    where?: booksWhereInput
  }


  /**
   * books upsert
   */
  export type booksUpsertArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * The filter to search for the books to update in case it exists.
    **/
    where: booksWhereUniqueInput
    /**
     * In case the books found by the `where` argument doesn't exist, create a new books with this data.
    **/
    create: XOR<booksCreateInput, booksUncheckedCreateInput>
    /**
     * In case the books was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<booksUpdateInput, booksUncheckedUpdateInput>
  }


  /**
   * books delete
   */
  export type booksDeleteArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * Filter which books to delete.
    **/
    where: booksWhereUniqueInput
  }


  /**
   * books deleteMany
   */
  export type booksDeleteManyArgs = {
    where?: booksWhereInput
  }


  /**
   * books without action
   */
  export type booksArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
  }



  /**
   * Model borrow
   */


  export type AggregateBorrow = {
    count: BorrowCountAggregateOutputType | null
    avg: BorrowAvgAggregateOutputType | null
    sum: BorrowSumAggregateOutputType | null
    min: BorrowMinAggregateOutputType | null
    max: BorrowMaxAggregateOutputType | null
  }

  export type BorrowAvgAggregateOutputType = {
    id_borrow: number
    id_books: number | null
    id_user: number | null
  }

  export type BorrowSumAggregateOutputType = {
    id_borrow: number
    id_books: number | null
    id_user: number | null
  }

  export type BorrowMinAggregateOutputType = {
    id_borrow: number
    start_date: Date | null
    end_date: Date | null
    id_books: number | null
    id_user: number | null
  }

  export type BorrowMaxAggregateOutputType = {
    id_borrow: number
    start_date: Date | null
    end_date: Date | null
    id_books: number | null
    id_user: number | null
  }

  export type BorrowCountAggregateOutputType = {
    id_borrow: number
    start_date: number | null
    end_date: number | null
    id_books: number | null
    id_user: number | null
    _all: number
  }


  export type BorrowAvgAggregateInputType = {
    id_borrow?: true
    id_books?: true
    id_user?: true
  }

  export type BorrowSumAggregateInputType = {
    id_borrow?: true
    id_books?: true
    id_user?: true
  }

  export type BorrowMinAggregateInputType = {
    id_borrow?: true
    start_date?: true
    end_date?: true
    id_books?: true
    id_user?: true
  }

  export type BorrowMaxAggregateInputType = {
    id_borrow?: true
    start_date?: true
    end_date?: true
    id_books?: true
    id_user?: true
  }

  export type BorrowCountAggregateInputType = {
    id_borrow?: true
    start_date?: true
    end_date?: true
    id_books?: true
    id_user?: true
    _all?: true
  }

  export type BorrowAggregateArgs = {
    /**
     * Filter which borrow to aggregate.
    **/
    where?: borrowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of borrows to fetch.
    **/
    orderBy?: Enumerable<borrowOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: borrowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` borrows from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` borrows.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned borrows
    **/
    count?: true | BorrowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: BorrowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: BorrowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: BorrowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: BorrowMaxAggregateInputType
  }

  export type GetBorrowAggregateType<T extends BorrowAggregateArgs> = {
    [P in keyof T & keyof AggregateBorrow]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBorrow[P]>
      : GetScalarType<T[P], AggregateBorrow[P]>
  }


    
    
  export type BorrowGroupByArgs = {
    where?: borrowWhereInput
    orderBy?: Enumerable<borrowOrderByInput>
    by: Array<BorrowScalarFieldEnum>
    having?: borrowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: BorrowCountAggregateInputType | true
    avg?: BorrowAvgAggregateInputType
    sum?: BorrowSumAggregateInputType
    min?: BorrowMinAggregateInputType
    max?: BorrowMaxAggregateInputType
  }


  export type BorrowGroupByOutputType = {
    id_borrow: number
    start_date: Date | null
    end_date: Date | null
    id_books: number | null
    id_user: number | null
    count: BorrowCountAggregateOutputType | null
    avg: BorrowAvgAggregateOutputType | null
    sum: BorrowSumAggregateOutputType | null
    min: BorrowMinAggregateOutputType | null
    max: BorrowMaxAggregateOutputType | null
  }

  type GetBorrowGroupByPayload<T extends BorrowGroupByArgs> = Promise<Array<
    PickArray<BorrowGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof BorrowGroupByOutputType))]: GetScalarType<T[P], BorrowGroupByOutputType[P]>
    }
  >>
    

  export type borrowSelect = {
    id_borrow?: boolean
    start_date?: boolean
    end_date?: boolean
    id_books?: boolean
    id_user?: boolean
  }

  export type borrowGetPayload<
    S extends boolean | null | undefined | borrowArgs,
    U = keyof S
      > = S extends true
        ? borrow
    : S extends undefined
    ? never
    : S extends borrowArgs | borrowFindManyArgs
    ?'include' extends U
    ? borrow 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof borrow ?borrow [P]
  : 
     never
  } 
    : borrow
  : borrow


  type borrowCountArgs = Merge<
    Omit<borrowFindManyArgs, 'select' | 'include'> & {
      select?: BorrowCountAggregateInputType | true
    }
  >

  export interface borrowDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Borrow that matches the filter.
     * @param {borrowFindUniqueArgs} args - Arguments to find a Borrow
     * @example
     * // Get one Borrow
     * const borrow = await prisma.borrow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends borrowFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, borrowFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'borrow'> extends True ? CheckSelect<T, Prisma__borrowClient<borrow>, Prisma__borrowClient<borrowGetPayload<T>>> : CheckSelect<T, Prisma__borrowClient<borrow | null >, Prisma__borrowClient<borrowGetPayload<T> | null >>

    /**
     * Find the first Borrow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {borrowFindFirstArgs} args - Arguments to find a Borrow
     * @example
     * // Get one Borrow
     * const borrow = await prisma.borrow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends borrowFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, borrowFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'borrow'> extends True ? CheckSelect<T, Prisma__borrowClient<borrow>, Prisma__borrowClient<borrowGetPayload<T>>> : CheckSelect<T, Prisma__borrowClient<borrow | null >, Prisma__borrowClient<borrowGetPayload<T> | null >>

    /**
     * Find zero or more Borrows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {borrowFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Borrows
     * const borrows = await prisma.borrow.findMany()
     * 
     * // Get first 10 Borrows
     * const borrows = await prisma.borrow.findMany({ take: 10 })
     * 
     * // Only select the `id_borrow`
     * const borrowWithId_borrowOnly = await prisma.borrow.findMany({ select: { id_borrow: true } })
     * 
    **/
    findMany<T extends borrowFindManyArgs>(
      args?: SelectSubset<T, borrowFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<borrow>>, PrismaPromise<Array<borrowGetPayload<T>>>>

    /**
     * Create a Borrow.
     * @param {borrowCreateArgs} args - Arguments to create a Borrow.
     * @example
     * // Create one Borrow
     * const Borrow = await prisma.borrow.create({
     *   data: {
     *     // ... data to create a Borrow
     *   }
     * })
     * 
    **/
    create<T extends borrowCreateArgs>(
      args: SelectSubset<T, borrowCreateArgs>
    ): CheckSelect<T, Prisma__borrowClient<borrow>, Prisma__borrowClient<borrowGetPayload<T>>>

    /**
     * Delete a Borrow.
     * @param {borrowDeleteArgs} args - Arguments to delete one Borrow.
     * @example
     * // Delete one Borrow
     * const Borrow = await prisma.borrow.delete({
     *   where: {
     *     // ... filter to delete one Borrow
     *   }
     * })
     * 
    **/
    delete<T extends borrowDeleteArgs>(
      args: SelectSubset<T, borrowDeleteArgs>
    ): CheckSelect<T, Prisma__borrowClient<borrow>, Prisma__borrowClient<borrowGetPayload<T>>>

    /**
     * Update one Borrow.
     * @param {borrowUpdateArgs} args - Arguments to update one Borrow.
     * @example
     * // Update one Borrow
     * const borrow = await prisma.borrow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends borrowUpdateArgs>(
      args: SelectSubset<T, borrowUpdateArgs>
    ): CheckSelect<T, Prisma__borrowClient<borrow>, Prisma__borrowClient<borrowGetPayload<T>>>

    /**
     * Delete zero or more Borrows.
     * @param {borrowDeleteManyArgs} args - Arguments to filter Borrows to delete.
     * @example
     * // Delete a few Borrows
     * const { count } = await prisma.borrow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends borrowDeleteManyArgs>(
      args?: SelectSubset<T, borrowDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Borrows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {borrowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Borrows
     * const borrow = await prisma.borrow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends borrowUpdateManyArgs>(
      args: SelectSubset<T, borrowUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Borrow.
     * @param {borrowUpsertArgs} args - Arguments to update or create a Borrow.
     * @example
     * // Update or create a Borrow
     * const borrow = await prisma.borrow.upsert({
     *   create: {
     *     // ... data to create a Borrow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Borrow we want to update
     *   }
     * })
    **/
    upsert<T extends borrowUpsertArgs>(
      args: SelectSubset<T, borrowUpsertArgs>
    ): CheckSelect<T, Prisma__borrowClient<borrow>, Prisma__borrowClient<borrowGetPayload<T>>>

    /**
     * Count the number of Borrows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {borrowCountArgs} args - Arguments to filter Borrows to count.
     * @example
     * // Count the number of Borrows
     * const count = await prisma.borrow.count({
     *   where: {
     *     // ... the filter for the Borrows we want to count
     *   }
     * })
    **/
    count<T extends borrowCountArgs>(
      args?: Subset<T, borrowCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BorrowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Borrow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BorrowAggregateArgs>(args: Subset<T, BorrowAggregateArgs>): PrismaPromise<GetBorrowAggregateType<T>>

    /**
     * Group by Borrow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BorrowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BorrowGroupByArgs['orderBy'] }
        : { orderBy?: BorrowGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BorrowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBorrowGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for borrow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__borrowClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * borrow findUnique
   */
  export type borrowFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the borrow
    **/
    select?: borrowSelect | null
    /**
     * Throw an Error if a borrow can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which borrow to fetch.
    **/
    where: borrowWhereUniqueInput
  }


  /**
   * borrow findFirst
   */
  export type borrowFindFirstArgs = {
    /**
     * Select specific fields to fetch from the borrow
    **/
    select?: borrowSelect | null
    /**
     * Throw an Error if a borrow can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which borrow to fetch.
    **/
    where?: borrowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of borrows to fetch.
    **/
    orderBy?: Enumerable<borrowOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for borrows.
    **/
    cursor?: borrowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` borrows from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` borrows.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of borrows.
    **/
    distinct?: Enumerable<BorrowScalarFieldEnum>
  }


  /**
   * borrow findMany
   */
  export type borrowFindManyArgs = {
    /**
     * Select specific fields to fetch from the borrow
    **/
    select?: borrowSelect | null
    /**
     * Filter, which borrows to fetch.
    **/
    where?: borrowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of borrows to fetch.
    **/
    orderBy?: Enumerable<borrowOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing borrows.
    **/
    cursor?: borrowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` borrows from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` borrows.
    **/
    skip?: number
    distinct?: Enumerable<BorrowScalarFieldEnum>
  }


  /**
   * borrow create
   */
  export type borrowCreateArgs = {
    /**
     * Select specific fields to fetch from the borrow
    **/
    select?: borrowSelect | null
    /**
     * The data needed to create a borrow.
    **/
    data: XOR<borrowCreateInput, borrowUncheckedCreateInput>
  }


  /**
   * borrow update
   */
  export type borrowUpdateArgs = {
    /**
     * Select specific fields to fetch from the borrow
    **/
    select?: borrowSelect | null
    /**
     * The data needed to update a borrow.
    **/
    data: XOR<borrowUpdateInput, borrowUncheckedUpdateInput>
    /**
     * Choose, which borrow to update.
    **/
    where: borrowWhereUniqueInput
  }


  /**
   * borrow updateMany
   */
  export type borrowUpdateManyArgs = {
    data: XOR<borrowUpdateManyMutationInput, borrowUncheckedUpdateManyInput>
    where?: borrowWhereInput
  }


  /**
   * borrow upsert
   */
  export type borrowUpsertArgs = {
    /**
     * Select specific fields to fetch from the borrow
    **/
    select?: borrowSelect | null
    /**
     * The filter to search for the borrow to update in case it exists.
    **/
    where: borrowWhereUniqueInput
    /**
     * In case the borrow found by the `where` argument doesn't exist, create a new borrow with this data.
    **/
    create: XOR<borrowCreateInput, borrowUncheckedCreateInput>
    /**
     * In case the borrow was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<borrowUpdateInput, borrowUncheckedUpdateInput>
  }


  /**
   * borrow delete
   */
  export type borrowDeleteArgs = {
    /**
     * Select specific fields to fetch from the borrow
    **/
    select?: borrowSelect | null
    /**
     * Filter which borrow to delete.
    **/
    where: borrowWhereUniqueInput
  }


  /**
   * borrow deleteMany
   */
  export type borrowDeleteManyArgs = {
    where?: borrowWhereInput
  }


  /**
   * borrow without action
   */
  export type borrowArgs = {
    /**
     * Select specific fields to fetch from the borrow
    **/
    select?: borrowSelect | null
  }



  /**
   * Model category
   */


  export type AggregateCategory = {
    count: CategoryCountAggregateOutputType | null
    avg: CategoryAvgAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id_category: number
  }

  export type CategorySumAggregateOutputType = {
    id_category: number
  }

  export type CategoryMinAggregateOutputType = {
    id_category: number
    name_category: string | null
    cover_category: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id_category: number
    name_category: string | null
    cover_category: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id_category: number
    name_category: number | null
    cover_category: number | null
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id_category?: true
  }

  export type CategorySumAggregateInputType = {
    id_category?: true
  }

  export type CategoryMinAggregateInputType = {
    id_category?: true
    name_category?: true
    cover_category?: true
  }

  export type CategoryMaxAggregateInputType = {
    id_category?: true
    name_category?: true
    cover_category?: true
  }

  export type CategoryCountAggregateInputType = {
    id_category?: true
    name_category?: true
    cover_category?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which category to aggregate.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateCategory]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }


    
    
  export type CategoryGroupByArgs = {
    where?: categoryWhereInput
    orderBy?: Enumerable<categoryOrderByInput>
    by: Array<CategoryScalarFieldEnum>
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: CategoryCountAggregateInputType | true
    avg?: CategoryAvgAggregateInputType
    sum?: CategorySumAggregateInputType
    min?: CategoryMinAggregateInputType
    max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id_category: number
    name_category: string | null
    cover_category: string | null
    count: CategoryCountAggregateOutputType | null
    avg: CategoryAvgAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Promise<Array<
    PickArray<CategoryGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: GetScalarType<T[P], CategoryGroupByOutputType[P]>
    }
  >>
    

  export type categorySelect = {
    id_category?: boolean
    name_category?: boolean
    cover_category?: boolean
    books?: boolean | booksFindManyArgs
  }

  export type categoryInclude = {
    books?: boolean | booksFindManyArgs
  }

  export type categoryGetPayload<
    S extends boolean | null | undefined | categoryArgs,
    U = keyof S
      > = S extends true
        ? category
    : S extends undefined
    ? never
    : S extends categoryArgs | categoryFindManyArgs
    ?'include' extends U
    ? category  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? Array < booksGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof category ?category [P]
  : 
          P extends 'books'
        ? Array < booksGetPayload<S['select'][P]>>  : never
  } 
    : category
  : category


  type categoryCountArgs = Merge<
    Omit<categoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface categoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'category'> extends True ? CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>> : CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'category'> extends True ? CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>> : CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id_category`
     * const categoryWithId_categoryOnly = await prisma.category.findMany({ select: { id_category: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs>(
      args?: SelectSubset<T, categoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<category>>, PrismaPromise<Array<categoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs>(
      args: SelectSubset<T, categoryCreateArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs>(
      args: SelectSubset<T, categoryDeleteArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs>(
      args: SelectSubset<T, categoryUpdateArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs>(
      args?: SelectSubset<T, categoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs>(
      args: SelectSubset<T, categoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs>(
      args: SelectSubset<T, categoryUpsertArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksFindManyArgs = {}>(args?: Subset<T, booksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<books>>, PrismaPromise<Array<booksGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Throw an Error if a category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which category to fetch.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category findFirst
   */
  export type categoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Throw an Error if a category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which category to fetch.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category findMany
   */
  export type categoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Filter, which categories to fetch.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category create
   */
  export type categoryCreateArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The data needed to create a category.
    **/
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category update
   */
  export type categoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The data needed to update a category.
    **/
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs = {
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The filter to search for the category to update in case it exists.
    **/
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
    **/
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Filter which category to delete.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs = {
    where?: categoryWhereInput
  }


  /**
   * category without action
   */
  export type categoryArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
  }



  /**
   * Model discussion
   */


  export type AggregateDiscussion = {
    count: DiscussionCountAggregateOutputType | null
    avg: DiscussionAvgAggregateOutputType | null
    sum: DiscussionSumAggregateOutputType | null
    min: DiscussionMinAggregateOutputType | null
    max: DiscussionMaxAggregateOutputType | null
  }

  export type DiscussionAvgAggregateOutputType = {
    id_discussion: number
    id_books: number | null
    id_user: number | null
  }

  export type DiscussionSumAggregateOutputType = {
    id_discussion: number
    id_books: number | null
    id_user: number | null
  }

  export type DiscussionMinAggregateOutputType = {
    id_discussion: number
    diskusi: string | null
    id_books: number | null
    id_user: number | null
  }

  export type DiscussionMaxAggregateOutputType = {
    id_discussion: number
    diskusi: string | null
    id_books: number | null
    id_user: number | null
  }

  export type DiscussionCountAggregateOutputType = {
    id_discussion: number
    diskusi: number | null
    id_books: number | null
    id_user: number | null
    _all: number
  }


  export type DiscussionAvgAggregateInputType = {
    id_discussion?: true
    id_books?: true
    id_user?: true
  }

  export type DiscussionSumAggregateInputType = {
    id_discussion?: true
    id_books?: true
    id_user?: true
  }

  export type DiscussionMinAggregateInputType = {
    id_discussion?: true
    diskusi?: true
    id_books?: true
    id_user?: true
  }

  export type DiscussionMaxAggregateInputType = {
    id_discussion?: true
    diskusi?: true
    id_books?: true
    id_user?: true
  }

  export type DiscussionCountAggregateInputType = {
    id_discussion?: true
    diskusi?: true
    id_books?: true
    id_user?: true
    _all?: true
  }

  export type DiscussionAggregateArgs = {
    /**
     * Filter which discussion to aggregate.
    **/
    where?: discussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discussions to fetch.
    **/
    orderBy?: Enumerable<discussionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: discussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discussions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discussions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned discussions
    **/
    count?: true | DiscussionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DiscussionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DiscussionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DiscussionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DiscussionMaxAggregateInputType
  }

  export type GetDiscussionAggregateType<T extends DiscussionAggregateArgs> = {
    [P in keyof T & keyof AggregateDiscussion]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussion[P]>
      : GetScalarType<T[P], AggregateDiscussion[P]>
  }


    
    
  export type DiscussionGroupByArgs = {
    where?: discussionWhereInput
    orderBy?: Enumerable<discussionOrderByInput>
    by: Array<DiscussionScalarFieldEnum>
    having?: discussionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: DiscussionCountAggregateInputType | true
    avg?: DiscussionAvgAggregateInputType
    sum?: DiscussionSumAggregateInputType
    min?: DiscussionMinAggregateInputType
    max?: DiscussionMaxAggregateInputType
  }


  export type DiscussionGroupByOutputType = {
    id_discussion: number
    diskusi: string | null
    id_books: number | null
    id_user: number | null
    count: DiscussionCountAggregateOutputType | null
    avg: DiscussionAvgAggregateOutputType | null
    sum: DiscussionSumAggregateOutputType | null
    min: DiscussionMinAggregateOutputType | null
    max: DiscussionMaxAggregateOutputType | null
  }

  type GetDiscussionGroupByPayload<T extends DiscussionGroupByArgs> = Promise<Array<
    PickArray<DiscussionGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof DiscussionGroupByOutputType))]: GetScalarType<T[P], DiscussionGroupByOutputType[P]>
    }
  >>
    

  export type discussionSelect = {
    id_discussion?: boolean
    diskusi?: boolean
    id_books?: boolean
    id_user?: boolean
    books?: boolean | booksArgs
    user?: boolean | userArgs
  }

  export type discussionInclude = {
    books?: boolean | booksArgs
    user?: boolean | userArgs
  }

  export type discussionGetPayload<
    S extends boolean | null | undefined | discussionArgs,
    U = keyof S
      > = S extends true
        ? discussion
    : S extends undefined
    ? never
    : S extends discussionArgs | discussionFindManyArgs
    ?'include' extends U
    ? discussion  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? booksGetPayload<S['include'][P]> | null :
        P extends 'user'
        ? userGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof discussion ?discussion [P]
  : 
          P extends 'books'
        ? booksGetPayload<S['select'][P]> | null :
        P extends 'user'
        ? userGetPayload<S['select'][P]> | null : never
  } 
    : discussion
  : discussion


  type discussionCountArgs = Merge<
    Omit<discussionFindManyArgs, 'select' | 'include'> & {
      select?: DiscussionCountAggregateInputType | true
    }
  >

  export interface discussionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Discussion that matches the filter.
     * @param {discussionFindUniqueArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends discussionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, discussionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'discussion'> extends True ? CheckSelect<T, Prisma__discussionClient<discussion>, Prisma__discussionClient<discussionGetPayload<T>>> : CheckSelect<T, Prisma__discussionClient<discussion | null >, Prisma__discussionClient<discussionGetPayload<T> | null >>

    /**
     * Find the first Discussion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionFindFirstArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends discussionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, discussionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'discussion'> extends True ? CheckSelect<T, Prisma__discussionClient<discussion>, Prisma__discussionClient<discussionGetPayload<T>>> : CheckSelect<T, Prisma__discussionClient<discussion | null >, Prisma__discussionClient<discussionGetPayload<T> | null >>

    /**
     * Find zero or more Discussions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discussions
     * const discussions = await prisma.discussion.findMany()
     * 
     * // Get first 10 Discussions
     * const discussions = await prisma.discussion.findMany({ take: 10 })
     * 
     * // Only select the `id_discussion`
     * const discussionWithId_discussionOnly = await prisma.discussion.findMany({ select: { id_discussion: true } })
     * 
    **/
    findMany<T extends discussionFindManyArgs>(
      args?: SelectSubset<T, discussionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<discussion>>, PrismaPromise<Array<discussionGetPayload<T>>>>

    /**
     * Create a Discussion.
     * @param {discussionCreateArgs} args - Arguments to create a Discussion.
     * @example
     * // Create one Discussion
     * const Discussion = await prisma.discussion.create({
     *   data: {
     *     // ... data to create a Discussion
     *   }
     * })
     * 
    **/
    create<T extends discussionCreateArgs>(
      args: SelectSubset<T, discussionCreateArgs>
    ): CheckSelect<T, Prisma__discussionClient<discussion>, Prisma__discussionClient<discussionGetPayload<T>>>

    /**
     * Delete a Discussion.
     * @param {discussionDeleteArgs} args - Arguments to delete one Discussion.
     * @example
     * // Delete one Discussion
     * const Discussion = await prisma.discussion.delete({
     *   where: {
     *     // ... filter to delete one Discussion
     *   }
     * })
     * 
    **/
    delete<T extends discussionDeleteArgs>(
      args: SelectSubset<T, discussionDeleteArgs>
    ): CheckSelect<T, Prisma__discussionClient<discussion>, Prisma__discussionClient<discussionGetPayload<T>>>

    /**
     * Update one Discussion.
     * @param {discussionUpdateArgs} args - Arguments to update one Discussion.
     * @example
     * // Update one Discussion
     * const discussion = await prisma.discussion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends discussionUpdateArgs>(
      args: SelectSubset<T, discussionUpdateArgs>
    ): CheckSelect<T, Prisma__discussionClient<discussion>, Prisma__discussionClient<discussionGetPayload<T>>>

    /**
     * Delete zero or more Discussions.
     * @param {discussionDeleteManyArgs} args - Arguments to filter Discussions to delete.
     * @example
     * // Delete a few Discussions
     * const { count } = await prisma.discussion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends discussionDeleteManyArgs>(
      args?: SelectSubset<T, discussionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discussions
     * const discussion = await prisma.discussion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends discussionUpdateManyArgs>(
      args: SelectSubset<T, discussionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Discussion.
     * @param {discussionUpsertArgs} args - Arguments to update or create a Discussion.
     * @example
     * // Update or create a Discussion
     * const discussion = await prisma.discussion.upsert({
     *   create: {
     *     // ... data to create a Discussion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discussion we want to update
     *   }
     * })
    **/
    upsert<T extends discussionUpsertArgs>(
      args: SelectSubset<T, discussionUpsertArgs>
    ): CheckSelect<T, Prisma__discussionClient<discussion>, Prisma__discussionClient<discussionGetPayload<T>>>

    /**
     * Count the number of Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussionCountArgs} args - Arguments to filter Discussions to count.
     * @example
     * // Count the number of Discussions
     * const count = await prisma.discussion.count({
     *   where: {
     *     // ... the filter for the Discussions we want to count
     *   }
     * })
    **/
    count<T extends discussionCountArgs>(
      args?: Subset<T, discussionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionAggregateArgs>(args: Subset<T, DiscussionAggregateArgs>): PrismaPromise<GetDiscussionAggregateType<T>>

    /**
     * Group by Discussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for discussion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__discussionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksArgs = {}>(args?: Subset<T, booksArgs>): CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>;

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * discussion findUnique
   */
  export type discussionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the discussion
    **/
    select?: discussionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussionInclude | null
    /**
     * Throw an Error if a discussion can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which discussion to fetch.
    **/
    where: discussionWhereUniqueInput
  }


  /**
   * discussion findFirst
   */
  export type discussionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the discussion
    **/
    select?: discussionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussionInclude | null
    /**
     * Throw an Error if a discussion can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which discussion to fetch.
    **/
    where?: discussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discussions to fetch.
    **/
    orderBy?: Enumerable<discussionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discussions.
    **/
    cursor?: discussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discussions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discussions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discussions.
    **/
    distinct?: Enumerable<DiscussionScalarFieldEnum>
  }


  /**
   * discussion findMany
   */
  export type discussionFindManyArgs = {
    /**
     * Select specific fields to fetch from the discussion
    **/
    select?: discussionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussionInclude | null
    /**
     * Filter, which discussions to fetch.
    **/
    where?: discussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discussions to fetch.
    **/
    orderBy?: Enumerable<discussionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing discussions.
    **/
    cursor?: discussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discussions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discussions.
    **/
    skip?: number
    distinct?: Enumerable<DiscussionScalarFieldEnum>
  }


  /**
   * discussion create
   */
  export type discussionCreateArgs = {
    /**
     * Select specific fields to fetch from the discussion
    **/
    select?: discussionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussionInclude | null
    /**
     * The data needed to create a discussion.
    **/
    data: XOR<discussionCreateInput, discussionUncheckedCreateInput>
  }


  /**
   * discussion update
   */
  export type discussionUpdateArgs = {
    /**
     * Select specific fields to fetch from the discussion
    **/
    select?: discussionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussionInclude | null
    /**
     * The data needed to update a discussion.
    **/
    data: XOR<discussionUpdateInput, discussionUncheckedUpdateInput>
    /**
     * Choose, which discussion to update.
    **/
    where: discussionWhereUniqueInput
  }


  /**
   * discussion updateMany
   */
  export type discussionUpdateManyArgs = {
    data: XOR<discussionUpdateManyMutationInput, discussionUncheckedUpdateManyInput>
    where?: discussionWhereInput
  }


  /**
   * discussion upsert
   */
  export type discussionUpsertArgs = {
    /**
     * Select specific fields to fetch from the discussion
    **/
    select?: discussionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussionInclude | null
    /**
     * The filter to search for the discussion to update in case it exists.
    **/
    where: discussionWhereUniqueInput
    /**
     * In case the discussion found by the `where` argument doesn't exist, create a new discussion with this data.
    **/
    create: XOR<discussionCreateInput, discussionUncheckedCreateInput>
    /**
     * In case the discussion was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<discussionUpdateInput, discussionUncheckedUpdateInput>
  }


  /**
   * discussion delete
   */
  export type discussionDeleteArgs = {
    /**
     * Select specific fields to fetch from the discussion
    **/
    select?: discussionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussionInclude | null
    /**
     * Filter which discussion to delete.
    **/
    where: discussionWhereUniqueInput
  }


  /**
   * discussion deleteMany
   */
  export type discussionDeleteManyArgs = {
    where?: discussionWhereInput
  }


  /**
   * discussion without action
   */
  export type discussionArgs = {
    /**
     * Select specific fields to fetch from the discussion
    **/
    select?: discussionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussionInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id_user: number
    NIK: number | null
  }

  export type UserSumAggregateOutputType = {
    id_user: number
    NIK: number | null
  }

  export type UserMinAggregateOutputType = {
    id_user: number
    name_user: string | null
    username: string | null
    email: string | null
    password: string | null
    NIK: number | null
    foto_user: string | null
    address: string | null
    no_hp: string | null
    gender: string | null
    birth_date: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id_user: number
    name_user: string | null
    username: string | null
    email: string | null
    password: string | null
    NIK: number | null
    foto_user: string | null
    address: string | null
    no_hp: string | null
    gender: string | null
    birth_date: Date | null
  }

  export type UserCountAggregateOutputType = {
    id_user: number
    name_user: number | null
    username: number | null
    email: number | null
    password: number | null
    NIK: number | null
    foto_user: number | null
    address: number | null
    no_hp: number | null
    gender: number | null
    birth_date: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id_user?: true
    NIK?: true
  }

  export type UserSumAggregateInputType = {
    id_user?: true
    NIK?: true
  }

  export type UserMinAggregateInputType = {
    id_user?: true
    name_user?: true
    username?: true
    email?: true
    password?: true
    NIK?: true
    foto_user?: true
    address?: true
    no_hp?: true
    gender?: true
    birth_date?: true
  }

  export type UserMaxAggregateInputType = {
    id_user?: true
    name_user?: true
    username?: true
    email?: true
    password?: true
    NIK?: true
    foto_user?: true
    address?: true
    no_hp?: true
    gender?: true
    birth_date?: true
  }

  export type UserCountAggregateInputType = {
    id_user?: true
    name_user?: true
    username?: true
    email?: true
    password?: true
    NIK?: true
    foto_user?: true
    address?: true
    no_hp?: true
    gender?: true
    birth_date?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: UserCountAggregateInputType | true
    avg?: UserAvgAggregateInputType
    sum?: UserSumAggregateInputType
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id_user: number
    name_user: string | null
    username: string | null
    email: string | null
    password: string | null
    NIK: number | null
    foto_user: string | null
    address: string | null
    no_hp: string | null
    gender: string | null
    birth_date: Date | null
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<Array<
    PickArray<UserGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof UserGroupByOutputType))]: GetScalarType<T[P], UserGroupByOutputType[P]>
    }
  >>
    

  export type userSelect = {
    id_user?: boolean
    name_user?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    NIK?: boolean
    foto_user?: boolean
    address?: boolean
    no_hp?: boolean
    gender?: boolean
    birth_date?: boolean
    books?: boolean | booksFindManyArgs
    discussion?: boolean | discussionFindManyArgs
  }

  export type userInclude = {
    books?: boolean | booksFindManyArgs
    discussion?: boolean | discussionFindManyArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? Array < booksGetPayload<S['include'][P]>>  :
        P extends 'discussion'
        ? Array < discussionGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user ?user [P]
  : 
          P extends 'books'
        ? Array < booksGetPayload<S['select'][P]>>  :
        P extends 'discussion'
        ? Array < discussionGetPayload<S['select'][P]>>  : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const userWithId_userOnly = await prisma.user.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksFindManyArgs = {}>(args?: Subset<T, booksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<books>>, PrismaPromise<Array<booksGetPayload<T>>>>;

    discussion<T extends discussionFindManyArgs = {}>(args?: Subset<T, discussionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<discussion>>, PrismaPromise<Array<discussionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
  }



  /**
   * Model rating
   */


  export type AggregateRating = {
    count: RatingCountAggregateOutputType | null
    avg: RatingAvgAggregateOutputType | null
    sum: RatingSumAggregateOutputType | null
    min: RatingMinAggregateOutputType | null
    max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    id_rating: number
    rating: number | null
    id_books: number | null
  }

  export type RatingSumAggregateOutputType = {
    id_rating: number
    rating: number | null
    id_books: number | null
  }

  export type RatingMinAggregateOutputType = {
    id_rating: number
    rating: number | null
    id_books: number | null
  }

  export type RatingMaxAggregateOutputType = {
    id_rating: number
    rating: number | null
    id_books: number | null
  }

  export type RatingCountAggregateOutputType = {
    id_rating: number
    rating: number | null
    id_books: number | null
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    id_rating?: true
    rating?: true
    id_books?: true
  }

  export type RatingSumAggregateInputType = {
    id_rating?: true
    rating?: true
    id_books?: true
  }

  export type RatingMinAggregateInputType = {
    id_rating?: true
    rating?: true
    id_books?: true
  }

  export type RatingMaxAggregateInputType = {
    id_rating?: true
    rating?: true
    id_books?: true
  }

  export type RatingCountAggregateInputType = {
    id_rating?: true
    rating?: true
    id_books?: true
    _all?: true
  }

  export type RatingAggregateArgs = {
    /**
     * Filter which rating to aggregate.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ratings
    **/
    count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
    [P in keyof T & keyof AggregateRating]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }


    
    
  export type RatingGroupByArgs = {
    where?: ratingWhereInput
    orderBy?: Enumerable<ratingOrderByInput>
    by: Array<RatingScalarFieldEnum>
    having?: ratingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: RatingCountAggregateInputType | true
    avg?: RatingAvgAggregateInputType
    sum?: RatingSumAggregateInputType
    min?: RatingMinAggregateInputType
    max?: RatingMaxAggregateInputType
  }


  export type RatingGroupByOutputType = {
    id_rating: number
    rating: number | null
    id_books: number | null
    count: RatingCountAggregateOutputType | null
    avg: RatingAvgAggregateOutputType | null
    sum: RatingSumAggregateOutputType | null
    min: RatingMinAggregateOutputType | null
    max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Promise<Array<
    PickArray<RatingGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof RatingGroupByOutputType))]: GetScalarType<T[P], RatingGroupByOutputType[P]>
    }
  >>
    

  export type ratingSelect = {
    id_rating?: boolean
    rating?: boolean
    id_books?: boolean
    books?: boolean | booksArgs
  }

  export type ratingInclude = {
    books?: boolean | booksArgs
  }

  export type ratingGetPayload<
    S extends boolean | null | undefined | ratingArgs,
    U = keyof S
      > = S extends true
        ? rating
    : S extends undefined
    ? never
    : S extends ratingArgs | ratingFindManyArgs
    ?'include' extends U
    ? rating  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? booksGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rating ?rating [P]
  : 
          P extends 'books'
        ? booksGetPayload<S['select'][P]> | null : never
  } 
    : rating
  : rating


  type ratingCountArgs = Merge<
    Omit<ratingFindManyArgs, 'select' | 'include'> & {
      select?: RatingCountAggregateInputType | true
    }
  >

  export interface ratingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Rating that matches the filter.
     * @param {ratingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ratingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ratingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'rating'> extends True ? CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>> : CheckSelect<T, Prisma__ratingClient<rating | null >, Prisma__ratingClient<ratingGetPayload<T> | null >>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ratingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ratingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'rating'> extends True ? CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>> : CheckSelect<T, Prisma__ratingClient<rating | null >, Prisma__ratingClient<ratingGetPayload<T> | null >>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id_rating`
     * const ratingWithId_ratingOnly = await prisma.rating.findMany({ select: { id_rating: true } })
     * 
    **/
    findMany<T extends ratingFindManyArgs>(
      args?: SelectSubset<T, ratingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<rating>>, PrismaPromise<Array<ratingGetPayload<T>>>>

    /**
     * Create a Rating.
     * @param {ratingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends ratingCreateArgs>(
      args: SelectSubset<T, ratingCreateArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Delete a Rating.
     * @param {ratingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends ratingDeleteArgs>(
      args: SelectSubset<T, ratingDeleteArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Update one Rating.
     * @param {ratingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ratingUpdateArgs>(
      args: SelectSubset<T, ratingUpdateArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Delete zero or more Ratings.
     * @param {ratingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ratingDeleteManyArgs>(
      args?: SelectSubset<T, ratingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ratingUpdateManyArgs>(
      args: SelectSubset<T, ratingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {ratingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends ratingUpsertArgs>(
      args: SelectSubset<T, ratingUpsertArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends ratingCountArgs>(
      args?: Subset<T, ratingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ratingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksArgs = {}>(args?: Subset<T, booksArgs>): CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rating findUnique
   */
  export type ratingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * Throw an Error if a rating can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rating to fetch.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating findFirst
   */
  export type ratingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * Throw an Error if a rating can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rating to fetch.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ratings.
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ratings.
    **/
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * rating findMany
   */
  export type ratingFindManyArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * Filter, which ratings to fetch.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ratings.
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * rating create
   */
  export type ratingCreateArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * The data needed to create a rating.
    **/
    data: XOR<ratingCreateInput, ratingUncheckedCreateInput>
  }


  /**
   * rating update
   */
  export type ratingUpdateArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * The data needed to update a rating.
    **/
    data: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
    /**
     * Choose, which rating to update.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating updateMany
   */
  export type ratingUpdateManyArgs = {
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyInput>
    where?: ratingWhereInput
  }


  /**
   * rating upsert
   */
  export type ratingUpsertArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * The filter to search for the rating to update in case it exists.
    **/
    where: ratingWhereUniqueInput
    /**
     * In case the rating found by the `where` argument doesn't exist, create a new rating with this data.
    **/
    create: XOR<ratingCreateInput, ratingUncheckedCreateInput>
    /**
     * In case the rating was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
  }


  /**
   * rating delete
   */
  export type ratingDeleteArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * Filter which rating to delete.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating deleteMany
   */
  export type ratingDeleteManyArgs = {
    where?: ratingWhereInput
  }


  /**
   * rating without action
   */
  export type ratingArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BooksScalarFieldEnum: {
    id_books: 'id_books',
    title: 'title',
    publisher: 'publisher',
    author: 'author',
    ISBN: 'ISBN',
    pages: 'pages',
    description: 'description',
    cover__book: 'cover__book',
    id_category: 'id_category',
    id_user: 'id_user',
    id_rate: 'id_rate'
  };

  export type BooksScalarFieldEnum = (typeof BooksScalarFieldEnum)[keyof typeof BooksScalarFieldEnum]


  export const BorrowScalarFieldEnum: {
    id_borrow: 'id_borrow',
    start_date: 'start_date',
    end_date: 'end_date',
    id_books: 'id_books',
    id_user: 'id_user'
  };

  export type BorrowScalarFieldEnum = (typeof BorrowScalarFieldEnum)[keyof typeof BorrowScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id_category: 'id_category',
    name_category: 'name_category',
    cover_category: 'cover_category'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const DiscussionScalarFieldEnum: {
    id_discussion: 'id_discussion',
    diskusi: 'diskusi',
    id_books: 'id_books',
    id_user: 'id_user'
  };

  export type DiscussionScalarFieldEnum = (typeof DiscussionScalarFieldEnum)[keyof typeof DiscussionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id_user: 'id_user',
    name_user: 'name_user',
    username: 'username',
    email: 'email',
    password: 'password',
    NIK: 'NIK',
    foto_user: 'foto_user',
    address: 'address',
    no_hp: 'no_hp',
    gender: 'gender',
    birth_date: 'birth_date'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id_rating: 'id_rating',
    rating: 'rating',
    id_books: 'id_books'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type booksWhereInput = {
    AND?: Enumerable<booksWhereInput>
    OR?: Enumerable<booksWhereInput>
    NOT?: Enumerable<booksWhereInput>
    id_books?: IntFilter | number
    title?: StringNullableFilter | string | null
    publisher?: StringNullableFilter | string | null
    author?: StringNullableFilter | string | null
    ISBN?: IntNullableFilter | number | null
    pages?: IntNullableFilter | number | null
    description?: StringNullableFilter | string | null
    cover__book?: StringNullableFilter | string | null
    id_category?: IntNullableFilter | number | null
    id_user?: IntNullableFilter | number | null
    id_rate?: IntNullableFilter | number | null
    category?: XOR<CategoryRelationFilter, categoryWhereInput> | null
    user?: XOR<UserRelationFilter, userWhereInput> | null
    discussion?: DiscussionListRelationFilter
    rating?: RatingListRelationFilter
  }

  export type booksOrderByInput = {
    id_books?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    author?: SortOrder
    ISBN?: SortOrder
    pages?: SortOrder
    description?: SortOrder
    cover__book?: SortOrder
    id_category?: SortOrder
    id_user?: SortOrder
    id_rate?: SortOrder
    category?: categoryOrderByInput
    user?: userOrderByInput
  }

  export type booksWhereUniqueInput = {
    id_books?: number
  }

  export type booksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<booksScalarWhereWithAggregatesInput>
    OR?: Enumerable<booksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<booksScalarWhereWithAggregatesInput>
    id_books?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    publisher?: StringNullableWithAggregatesFilter | string | null
    author?: StringNullableWithAggregatesFilter | string | null
    ISBN?: IntNullableWithAggregatesFilter | number | null
    pages?: IntNullableWithAggregatesFilter | number | null
    description?: StringNullableWithAggregatesFilter | string | null
    cover__book?: StringNullableWithAggregatesFilter | string | null
    id_category?: IntNullableWithAggregatesFilter | number | null
    id_user?: IntNullableWithAggregatesFilter | number | null
    id_rate?: IntNullableWithAggregatesFilter | number | null
  }

  export type borrowWhereInput = {
    AND?: Enumerable<borrowWhereInput>
    OR?: Enumerable<borrowWhereInput>
    NOT?: Enumerable<borrowWhereInput>
    id_borrow?: IntFilter | number
    start_date?: DateTimeNullableFilter | Date | string | null
    end_date?: DateTimeNullableFilter | Date | string | null
    id_books?: IntNullableFilter | number | null
    id_user?: IntNullableFilter | number | null
  }

  export type borrowOrderByInput = {
    id_borrow?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    id_books?: SortOrder
    id_user?: SortOrder
  }

  export type borrowWhereUniqueInput = {
    id_borrow?: number
  }

  export type borrowScalarWhereWithAggregatesInput = {
    AND?: Enumerable<borrowScalarWhereWithAggregatesInput>
    OR?: Enumerable<borrowScalarWhereWithAggregatesInput>
    NOT?: Enumerable<borrowScalarWhereWithAggregatesInput>
    id_borrow?: IntWithAggregatesFilter | number
    start_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    id_books?: IntNullableWithAggregatesFilter | number | null
    id_user?: IntNullableWithAggregatesFilter | number | null
  }

  export type categoryWhereInput = {
    AND?: Enumerable<categoryWhereInput>
    OR?: Enumerable<categoryWhereInput>
    NOT?: Enumerable<categoryWhereInput>
    id_category?: IntFilter | number
    name_category?: StringNullableFilter | string | null
    cover_category?: StringNullableFilter | string | null
    books?: BooksListRelationFilter
  }

  export type categoryOrderByInput = {
    id_category?: SortOrder
    name_category?: SortOrder
    cover_category?: SortOrder
  }

  export type categoryWhereUniqueInput = {
    id_category?: number
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoryScalarWhereWithAggregatesInput>
    id_category?: IntWithAggregatesFilter | number
    name_category?: StringNullableWithAggregatesFilter | string | null
    cover_category?: StringNullableWithAggregatesFilter | string | null
  }

  export type discussionWhereInput = {
    AND?: Enumerable<discussionWhereInput>
    OR?: Enumerable<discussionWhereInput>
    NOT?: Enumerable<discussionWhereInput>
    id_discussion?: IntFilter | number
    diskusi?: StringNullableFilter | string | null
    id_books?: IntNullableFilter | number | null
    id_user?: IntNullableFilter | number | null
    books?: XOR<BooksRelationFilter, booksWhereInput> | null
    user?: XOR<UserRelationFilter, userWhereInput> | null
  }

  export type discussionOrderByInput = {
    id_discussion?: SortOrder
    diskusi?: SortOrder
    id_books?: SortOrder
    id_user?: SortOrder
    books?: booksOrderByInput
    user?: userOrderByInput
  }

  export type discussionWhereUniqueInput = {
    id_discussion?: number
  }

  export type discussionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<discussionScalarWhereWithAggregatesInput>
    OR?: Enumerable<discussionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<discussionScalarWhereWithAggregatesInput>
    id_discussion?: IntWithAggregatesFilter | number
    diskusi?: StringNullableWithAggregatesFilter | string | null
    id_books?: IntNullableWithAggregatesFilter | number | null
    id_user?: IntNullableWithAggregatesFilter | number | null
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id_user?: IntFilter | number
    name_user?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    NIK?: IntNullableFilter | number | null
    foto_user?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    no_hp?: StringNullableFilter | string | null
    gender?: StringNullableFilter | string | null
    birth_date?: DateTimeNullableFilter | Date | string | null
    books?: BooksListRelationFilter
    discussion?: DiscussionListRelationFilter
  }

  export type userOrderByInput = {
    id_user?: SortOrder
    name_user?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    NIK?: SortOrder
    foto_user?: SortOrder
    address?: SortOrder
    no_hp?: SortOrder
    gender?: SortOrder
    birth_date?: SortOrder
  }

  export type userWhereUniqueInput = {
    id_user?: number
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id_user?: IntWithAggregatesFilter | number
    name_user?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    NIK?: IntNullableWithAggregatesFilter | number | null
    foto_user?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    no_hp?: StringNullableWithAggregatesFilter | string | null
    gender?: StringNullableWithAggregatesFilter | string | null
    birth_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ratingWhereInput = {
    AND?: Enumerable<ratingWhereInput>
    OR?: Enumerable<ratingWhereInput>
    NOT?: Enumerable<ratingWhereInput>
    id_rating?: IntFilter | number
    rating?: FloatNullableFilter | number | null
    id_books?: IntNullableFilter | number | null
    books?: XOR<BooksRelationFilter, booksWhereInput> | null
  }

  export type ratingOrderByInput = {
    id_rating?: SortOrder
    rating?: SortOrder
    id_books?: SortOrder
    books?: booksOrderByInput
  }

  export type ratingWhereUniqueInput = {
    id_rating?: number
  }

  export type ratingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ratingScalarWhereWithAggregatesInput>
    OR?: Enumerable<ratingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ratingScalarWhereWithAggregatesInput>
    id_rating?: IntWithAggregatesFilter | number
    rating?: FloatNullableWithAggregatesFilter | number | null
    id_books?: IntNullableWithAggregatesFilter | number | null
  }

  export type booksCreateInput = {
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_rate?: number | null
    category?: categoryCreateNestedOneWithoutBooksInput
    user?: userCreateNestedOneWithoutBooksInput
    discussion?: discussionCreateNestedManyWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateInput = {
    id_books?: number
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_category?: number | null
    id_user?: number | null
    id_rate?: number | null
    discussion?: discussionUncheckedCreateNestedManyWithoutBooksInput
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    category?: categoryUpdateOneWithoutBooksInput
    user?: userUpdateOneWithoutBooksInput
    discussion?: discussionUpdateManyWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateInput = {
    id_books?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    discussion?: discussionUncheckedUpdateManyWithoutBooksInput
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }

  export type booksUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type booksUncheckedUpdateManyInput = {
    id_books?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type borrowCreateInput = {
    start_date?: Date | string | null
    end_date?: Date | string | null
    id_books?: number | null
    id_user?: number | null
  }

  export type borrowUncheckedCreateInput = {
    id_borrow?: number
    start_date?: Date | string | null
    end_date?: Date | string | null
    id_books?: number | null
    id_user?: number | null
  }

  export type borrowUpdateInput = {
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type borrowUncheckedUpdateInput = {
    id_borrow?: IntFieldUpdateOperationsInput | number
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type borrowUpdateManyMutationInput = {
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type borrowUncheckedUpdateManyInput = {
    id_borrow?: IntFieldUpdateOperationsInput | number
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type categoryCreateInput = {
    name_category?: string | null
    cover_category?: string | null
    books?: booksCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id_category?: number
    name_category?: string | null
    cover_category?: string | null
    books?: booksUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    cover_category?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateManyWithoutCategoryInput
  }

  export type categoryUncheckedUpdateInput = {
    id_category?: IntFieldUpdateOperationsInput | number
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    cover_category?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUncheckedUpdateManyWithoutCategoryInput
  }

  export type categoryUpdateManyMutationInput = {
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    cover_category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoryUncheckedUpdateManyInput = {
    id_category?: IntFieldUpdateOperationsInput | number
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    cover_category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussionCreateInput = {
    diskusi?: string | null
    books?: booksCreateNestedOneWithoutDiscussionInput
    user?: userCreateNestedOneWithoutDiscussionInput
  }

  export type discussionUncheckedCreateInput = {
    id_discussion?: number
    diskusi?: string | null
    id_books?: number | null
    id_user?: number | null
  }

  export type discussionUpdateInput = {
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateOneWithoutDiscussionInput
    user?: userUpdateOneWithoutDiscussionInput
  }

  export type discussionUncheckedUpdateInput = {
    id_discussion?: IntFieldUpdateOperationsInput | number
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type discussionUpdateManyMutationInput = {
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussionUncheckedUpdateManyInput = {
    id_discussion?: IntFieldUpdateOperationsInput | number
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type userCreateInput = {
    name_user?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    NIK?: number | null
    foto_user?: string | null
    address?: string | null
    no_hp?: string | null
    gender?: string | null
    birth_date?: Date | string | null
    books?: booksCreateNestedManyWithoutUserInput
    discussion?: discussionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id_user?: number
    name_user?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    NIK?: number | null
    foto_user?: string | null
    address?: string | null
    no_hp?: string | null
    gender?: string | null
    birth_date?: Date | string | null
    books?: booksUncheckedCreateNestedManyWithoutUserInput
    discussion?: discussionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    name_user?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    NIK?: NullableIntFieldUpdateOperationsInput | number | null
    foto_user?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    no_hp?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    books?: booksUpdateManyWithoutUserInput
    discussion?: discussionUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name_user?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    NIK?: NullableIntFieldUpdateOperationsInput | number | null
    foto_user?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    no_hp?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    books?: booksUncheckedUpdateManyWithoutUserInput
    discussion?: discussionUncheckedUpdateManyWithoutUserInput
  }

  export type userUpdateManyMutationInput = {
    name_user?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    NIK?: NullableIntFieldUpdateOperationsInput | number | null
    foto_user?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    no_hp?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userUncheckedUpdateManyInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name_user?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    NIK?: NullableIntFieldUpdateOperationsInput | number | null
    foto_user?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    no_hp?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ratingCreateInput = {
    rating?: number | null
    books?: booksCreateNestedOneWithoutRatingInput
  }

  export type ratingUncheckedCreateInput = {
    id_rating?: number
    rating?: number | null
    id_books?: number | null
  }

  export type ratingUpdateInput = {
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    books?: booksUpdateOneWithoutRatingInput
  }

  export type ratingUncheckedUpdateInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ratingUpdateManyMutationInput = {
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ratingUncheckedUpdateManyInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CategoryRelationFilter = {
    is?: categoryWhereInput | null
    isNot?: categoryWhereInput | null
  }

  export type UserRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type DiscussionListRelationFilter = {
    every?: discussionWhereInput
    some?: discussionWhereInput
    none?: discussionWhereInput
  }

  export type RatingListRelationFilter = {
    every?: ratingWhereInput
    some?: ratingWhereInput
    none?: ratingWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    count?: NestedIntNullableFilter
    avg?: NestedFloatNullableFilter
    sum?: NestedIntNullableFilter
    min?: NestedIntNullableFilter
    max?: NestedIntNullableFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    count?: NestedIntNullableFilter
    min?: NestedDateTimeNullableFilter
    max?: NestedDateTimeNullableFilter
  }

  export type BooksListRelationFilter = {
    every?: booksWhereInput
    some?: booksWhereInput
    none?: booksWhereInput
  }

  export type BooksRelationFilter = {
    is?: booksWhereInput | null
    isNot?: booksWhereInput | null
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    count?: NestedIntNullableFilter
    avg?: NestedFloatNullableFilter
    sum?: NestedFloatNullableFilter
    min?: NestedFloatNullableFilter
    max?: NestedFloatNullableFilter
  }

  export type categoryCreateNestedOneWithoutBooksInput = {
    create?: XOR<categoryCreateWithoutBooksInput, categoryUncheckedCreateWithoutBooksInput>
    connectOrCreate?: categoryCreateOrConnectWithoutBooksInput
    connect?: categoryWhereUniqueInput
  }

  export type userCreateNestedOneWithoutBooksInput = {
    create?: XOR<userCreateWithoutBooksInput, userUncheckedCreateWithoutBooksInput>
    connectOrCreate?: userCreateOrConnectWithoutBooksInput
    connect?: userWhereUniqueInput
  }

  export type discussionCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<discussionCreateWithoutBooksInput>, Enumerable<discussionUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<discussionCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<discussionWhereUniqueInput>
  }

  export type ratingCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<ratingCreateWithoutBooksInput>, Enumerable<ratingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<ratingCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<ratingWhereUniqueInput>
  }

  export type discussionUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<discussionCreateWithoutBooksInput>, Enumerable<discussionUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<discussionCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<discussionWhereUniqueInput>
  }

  export type ratingUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<ratingCreateWithoutBooksInput>, Enumerable<ratingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<ratingCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<ratingWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type categoryUpdateOneWithoutBooksInput = {
    create?: XOR<categoryCreateWithoutBooksInput, categoryUncheckedCreateWithoutBooksInput>
    connectOrCreate?: categoryCreateOrConnectWithoutBooksInput
    upsert?: categoryUpsertWithoutBooksInput
    connect?: categoryWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<categoryUpdateWithoutBooksInput, categoryUncheckedUpdateWithoutBooksInput>
  }

  export type userUpdateOneWithoutBooksInput = {
    create?: XOR<userCreateWithoutBooksInput, userUncheckedCreateWithoutBooksInput>
    connectOrCreate?: userCreateOrConnectWithoutBooksInput
    upsert?: userUpsertWithoutBooksInput
    connect?: userWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<userUpdateWithoutBooksInput, userUncheckedUpdateWithoutBooksInput>
  }

  export type discussionUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<discussionCreateWithoutBooksInput>, Enumerable<discussionUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<discussionCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<discussionUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<discussionWhereUniqueInput>
    set?: Enumerable<discussionWhereUniqueInput>
    disconnect?: Enumerable<discussionWhereUniqueInput>
    delete?: Enumerable<discussionWhereUniqueInput>
    update?: Enumerable<discussionUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<discussionUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<discussionScalarWhereInput>
  }

  export type ratingUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<ratingCreateWithoutBooksInput>, Enumerable<ratingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<ratingCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<ratingUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<ratingWhereUniqueInput>
    set?: Enumerable<ratingWhereUniqueInput>
    disconnect?: Enumerable<ratingWhereUniqueInput>
    delete?: Enumerable<ratingWhereUniqueInput>
    update?: Enumerable<ratingUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<ratingUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<ratingScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type discussionUncheckedUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<discussionCreateWithoutBooksInput>, Enumerable<discussionUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<discussionCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<discussionUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<discussionWhereUniqueInput>
    set?: Enumerable<discussionWhereUniqueInput>
    disconnect?: Enumerable<discussionWhereUniqueInput>
    delete?: Enumerable<discussionWhereUniqueInput>
    update?: Enumerable<discussionUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<discussionUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<discussionScalarWhereInput>
  }

  export type ratingUncheckedUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<ratingCreateWithoutBooksInput>, Enumerable<ratingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<ratingCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<ratingUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<ratingWhereUniqueInput>
    set?: Enumerable<ratingWhereUniqueInput>
    disconnect?: Enumerable<ratingWhereUniqueInput>
    delete?: Enumerable<ratingWhereUniqueInput>
    update?: Enumerable<ratingUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<ratingUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<ratingScalarWhereInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type booksCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<booksCreateWithoutCategoryInput>, Enumerable<booksUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<booksCreateWithoutCategoryInput>, Enumerable<booksUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<booksCreateWithoutCategoryInput>, Enumerable<booksUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<booksWhereUniqueInput>
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<booksCreateWithoutCategoryInput>, Enumerable<booksUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<booksWhereUniqueInput>
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksCreateNestedOneWithoutDiscussionInput = {
    create?: XOR<booksCreateWithoutDiscussionInput, booksUncheckedCreateWithoutDiscussionInput>
    connectOrCreate?: booksCreateOrConnectWithoutDiscussionInput
    connect?: booksWhereUniqueInput
  }

  export type userCreateNestedOneWithoutDiscussionInput = {
    create?: XOR<userCreateWithoutDiscussionInput, userUncheckedCreateWithoutDiscussionInput>
    connectOrCreate?: userCreateOrConnectWithoutDiscussionInput
    connect?: userWhereUniqueInput
  }

  export type booksUpdateOneWithoutDiscussionInput = {
    create?: XOR<booksCreateWithoutDiscussionInput, booksUncheckedCreateWithoutDiscussionInput>
    connectOrCreate?: booksCreateOrConnectWithoutDiscussionInput
    upsert?: booksUpsertWithoutDiscussionInput
    connect?: booksWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<booksUpdateWithoutDiscussionInput, booksUncheckedUpdateWithoutDiscussionInput>
  }

  export type userUpdateOneWithoutDiscussionInput = {
    create?: XOR<userCreateWithoutDiscussionInput, userUncheckedCreateWithoutDiscussionInput>
    connectOrCreate?: userCreateOrConnectWithoutDiscussionInput
    upsert?: userUpsertWithoutDiscussionInput
    connect?: userWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<userUpdateWithoutDiscussionInput, userUncheckedUpdateWithoutDiscussionInput>
  }

  export type booksCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<booksCreateWithoutUserInput>, Enumerable<booksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutUserInput>
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type discussionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<discussionCreateWithoutUserInput>, Enumerable<discussionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<discussionCreateOrConnectWithoutUserInput>
    connect?: Enumerable<discussionWhereUniqueInput>
  }

  export type booksUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<booksCreateWithoutUserInput>, Enumerable<booksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutUserInput>
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type discussionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<discussionCreateWithoutUserInput>, Enumerable<discussionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<discussionCreateOrConnectWithoutUserInput>
    connect?: Enumerable<discussionWhereUniqueInput>
  }

  export type booksUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<booksCreateWithoutUserInput>, Enumerable<booksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<booksWhereUniqueInput>
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type discussionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<discussionCreateWithoutUserInput>, Enumerable<discussionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<discussionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<discussionUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<discussionWhereUniqueInput>
    set?: Enumerable<discussionWhereUniqueInput>
    disconnect?: Enumerable<discussionWhereUniqueInput>
    delete?: Enumerable<discussionWhereUniqueInput>
    update?: Enumerable<discussionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<discussionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<discussionScalarWhereInput>
  }

  export type booksUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<booksCreateWithoutUserInput>, Enumerable<booksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<booksWhereUniqueInput>
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type discussionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<discussionCreateWithoutUserInput>, Enumerable<discussionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<discussionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<discussionUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<discussionWhereUniqueInput>
    set?: Enumerable<discussionWhereUniqueInput>
    disconnect?: Enumerable<discussionWhereUniqueInput>
    delete?: Enumerable<discussionWhereUniqueInput>
    update?: Enumerable<discussionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<discussionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<discussionScalarWhereInput>
  }

  export type booksCreateNestedOneWithoutRatingInput = {
    create?: XOR<booksCreateWithoutRatingInput, booksUncheckedCreateWithoutRatingInput>
    connectOrCreate?: booksCreateOrConnectWithoutRatingInput
    connect?: booksWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type booksUpdateOneWithoutRatingInput = {
    create?: XOR<booksCreateWithoutRatingInput, booksUncheckedCreateWithoutRatingInput>
    connectOrCreate?: booksCreateOrConnectWithoutRatingInput
    upsert?: booksUpsertWithoutRatingInput
    connect?: booksWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<booksUpdateWithoutRatingInput, booksUncheckedUpdateWithoutRatingInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    count?: NestedIntNullableFilter
    avg?: NestedFloatNullableFilter
    sum?: NestedIntNullableFilter
    min?: NestedIntNullableFilter
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    count?: NestedIntNullableFilter
    min?: NestedDateTimeNullableFilter
    max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    count?: NestedIntNullableFilter
    avg?: NestedFloatNullableFilter
    sum?: NestedFloatNullableFilter
    min?: NestedFloatNullableFilter
    max?: NestedFloatNullableFilter
  }

  export type categoryCreateWithoutBooksInput = {
    name_category?: string | null
    cover_category?: string | null
  }

  export type categoryUncheckedCreateWithoutBooksInput = {
    id_category?: number
    name_category?: string | null
    cover_category?: string | null
  }

  export type categoryCreateOrConnectWithoutBooksInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutBooksInput, categoryUncheckedCreateWithoutBooksInput>
  }

  export type userCreateWithoutBooksInput = {
    name_user?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    NIK?: number | null
    foto_user?: string | null
    address?: string | null
    no_hp?: string | null
    gender?: string | null
    birth_date?: Date | string | null
    discussion?: discussionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutBooksInput = {
    id_user?: number
    name_user?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    NIK?: number | null
    foto_user?: string | null
    address?: string | null
    no_hp?: string | null
    gender?: string | null
    birth_date?: Date | string | null
    discussion?: discussionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutBooksInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutBooksInput, userUncheckedCreateWithoutBooksInput>
  }

  export type discussionCreateWithoutBooksInput = {
    diskusi?: string | null
    user?: userCreateNestedOneWithoutDiscussionInput
  }

  export type discussionUncheckedCreateWithoutBooksInput = {
    id_discussion?: number
    diskusi?: string | null
    id_user?: number | null
  }

  export type discussionCreateOrConnectWithoutBooksInput = {
    where: discussionWhereUniqueInput
    create: XOR<discussionCreateWithoutBooksInput, discussionUncheckedCreateWithoutBooksInput>
  }

  export type ratingCreateWithoutBooksInput = {
    rating?: number | null
  }

  export type ratingUncheckedCreateWithoutBooksInput = {
    id_rating?: number
    rating?: number | null
  }

  export type ratingCreateOrConnectWithoutBooksInput = {
    where: ratingWhereUniqueInput
    create: XOR<ratingCreateWithoutBooksInput, ratingUncheckedCreateWithoutBooksInput>
  }

  export type categoryUpsertWithoutBooksInput = {
    update: XOR<categoryUpdateWithoutBooksInput, categoryUncheckedUpdateWithoutBooksInput>
    create: XOR<categoryCreateWithoutBooksInput, categoryUncheckedCreateWithoutBooksInput>
  }

  export type categoryUpdateWithoutBooksInput = {
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    cover_category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoryUncheckedUpdateWithoutBooksInput = {
    id_category?: IntFieldUpdateOperationsInput | number
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    cover_category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUpsertWithoutBooksInput = {
    update: XOR<userUpdateWithoutBooksInput, userUncheckedUpdateWithoutBooksInput>
    create: XOR<userCreateWithoutBooksInput, userUncheckedCreateWithoutBooksInput>
  }

  export type userUpdateWithoutBooksInput = {
    name_user?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    NIK?: NullableIntFieldUpdateOperationsInput | number | null
    foto_user?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    no_hp?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    discussion?: discussionUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateWithoutBooksInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name_user?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    NIK?: NullableIntFieldUpdateOperationsInput | number | null
    foto_user?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    no_hp?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    discussion?: discussionUncheckedUpdateManyWithoutUserInput
  }

  export type discussionUpsertWithWhereUniqueWithoutBooksInput = {
    where: discussionWhereUniqueInput
    update: XOR<discussionUpdateWithoutBooksInput, discussionUncheckedUpdateWithoutBooksInput>
    create: XOR<discussionCreateWithoutBooksInput, discussionUncheckedCreateWithoutBooksInput>
  }

  export type discussionUpdateWithWhereUniqueWithoutBooksInput = {
    where: discussionWhereUniqueInput
    data: XOR<discussionUpdateWithoutBooksInput, discussionUncheckedUpdateWithoutBooksInput>
  }

  export type discussionUpdateManyWithWhereWithoutBooksInput = {
    where: discussionScalarWhereInput
    data: XOR<discussionUpdateManyMutationInput, discussionUncheckedUpdateManyWithoutDiscussionInput>
  }

  export type discussionScalarWhereInput = {
    AND?: Enumerable<discussionScalarWhereInput>
    OR?: Enumerable<discussionScalarWhereInput>
    NOT?: Enumerable<discussionScalarWhereInput>
    id_discussion?: IntFilter | number
    diskusi?: StringNullableFilter | string | null
    id_books?: IntNullableFilter | number | null
    id_user?: IntNullableFilter | number | null
  }

  export type ratingUpsertWithWhereUniqueWithoutBooksInput = {
    where: ratingWhereUniqueInput
    update: XOR<ratingUpdateWithoutBooksInput, ratingUncheckedUpdateWithoutBooksInput>
    create: XOR<ratingCreateWithoutBooksInput, ratingUncheckedCreateWithoutBooksInput>
  }

  export type ratingUpdateWithWhereUniqueWithoutBooksInput = {
    where: ratingWhereUniqueInput
    data: XOR<ratingUpdateWithoutBooksInput, ratingUncheckedUpdateWithoutBooksInput>
  }

  export type ratingUpdateManyWithWhereWithoutBooksInput = {
    where: ratingScalarWhereInput
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyWithoutRatingInput>
  }

  export type ratingScalarWhereInput = {
    AND?: Enumerable<ratingScalarWhereInput>
    OR?: Enumerable<ratingScalarWhereInput>
    NOT?: Enumerable<ratingScalarWhereInput>
    id_rating?: IntFilter | number
    rating?: FloatNullableFilter | number | null
    id_books?: IntNullableFilter | number | null
  }

  export type booksCreateWithoutCategoryInput = {
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_rate?: number | null
    user?: userCreateNestedOneWithoutBooksInput
    discussion?: discussionCreateNestedManyWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutCategoryInput = {
    id_books?: number
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_user?: number | null
    id_rate?: number | null
    discussion?: discussionUncheckedCreateNestedManyWithoutBooksInput
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutCategoryInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutCategoryInput, booksUncheckedCreateWithoutCategoryInput>
  }

  export type booksUpsertWithWhereUniqueWithoutCategoryInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutCategoryInput, booksUncheckedUpdateWithoutCategoryInput>
    create: XOR<booksCreateWithoutCategoryInput, booksUncheckedCreateWithoutCategoryInput>
  }

  export type booksUpdateWithWhereUniqueWithoutCategoryInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutCategoryInput, booksUncheckedUpdateWithoutCategoryInput>
  }

  export type booksUpdateManyWithWhereWithoutCategoryInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutBooksInput>
  }

  export type booksScalarWhereInput = {
    AND?: Enumerable<booksScalarWhereInput>
    OR?: Enumerable<booksScalarWhereInput>
    NOT?: Enumerable<booksScalarWhereInput>
    id_books?: IntFilter | number
    title?: StringNullableFilter | string | null
    publisher?: StringNullableFilter | string | null
    author?: StringNullableFilter | string | null
    ISBN?: IntNullableFilter | number | null
    pages?: IntNullableFilter | number | null
    description?: StringNullableFilter | string | null
    cover__book?: StringNullableFilter | string | null
    id_category?: IntNullableFilter | number | null
    id_user?: IntNullableFilter | number | null
    id_rate?: IntNullableFilter | number | null
  }

  export type booksCreateWithoutDiscussionInput = {
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_rate?: number | null
    category?: categoryCreateNestedOneWithoutBooksInput
    user?: userCreateNestedOneWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutDiscussionInput = {
    id_books?: number
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_category?: number | null
    id_user?: number | null
    id_rate?: number | null
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutDiscussionInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutDiscussionInput, booksUncheckedCreateWithoutDiscussionInput>
  }

  export type userCreateWithoutDiscussionInput = {
    name_user?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    NIK?: number | null
    foto_user?: string | null
    address?: string | null
    no_hp?: string | null
    gender?: string | null
    birth_date?: Date | string | null
    books?: booksCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutDiscussionInput = {
    id_user?: number
    name_user?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    NIK?: number | null
    foto_user?: string | null
    address?: string | null
    no_hp?: string | null
    gender?: string | null
    birth_date?: Date | string | null
    books?: booksUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutDiscussionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutDiscussionInput, userUncheckedCreateWithoutDiscussionInput>
  }

  export type booksUpsertWithoutDiscussionInput = {
    update: XOR<booksUpdateWithoutDiscussionInput, booksUncheckedUpdateWithoutDiscussionInput>
    create: XOR<booksCreateWithoutDiscussionInput, booksUncheckedCreateWithoutDiscussionInput>
  }

  export type booksUpdateWithoutDiscussionInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    category?: categoryUpdateOneWithoutBooksInput
    user?: userUpdateOneWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutDiscussionInput = {
    id_books?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }

  export type userUpsertWithoutDiscussionInput = {
    update: XOR<userUpdateWithoutDiscussionInput, userUncheckedUpdateWithoutDiscussionInput>
    create: XOR<userCreateWithoutDiscussionInput, userUncheckedCreateWithoutDiscussionInput>
  }

  export type userUpdateWithoutDiscussionInput = {
    name_user?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    NIK?: NullableIntFieldUpdateOperationsInput | number | null
    foto_user?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    no_hp?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    books?: booksUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateWithoutDiscussionInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name_user?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    NIK?: NullableIntFieldUpdateOperationsInput | number | null
    foto_user?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    no_hp?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    books?: booksUncheckedUpdateManyWithoutUserInput
  }

  export type booksCreateWithoutUserInput = {
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_rate?: number | null
    category?: categoryCreateNestedOneWithoutBooksInput
    discussion?: discussionCreateNestedManyWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutUserInput = {
    id_books?: number
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_category?: number | null
    id_rate?: number | null
    discussion?: discussionUncheckedCreateNestedManyWithoutBooksInput
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutUserInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutUserInput, booksUncheckedCreateWithoutUserInput>
  }

  export type discussionCreateWithoutUserInput = {
    diskusi?: string | null
    books?: booksCreateNestedOneWithoutDiscussionInput
  }

  export type discussionUncheckedCreateWithoutUserInput = {
    id_discussion?: number
    diskusi?: string | null
    id_books?: number | null
  }

  export type discussionCreateOrConnectWithoutUserInput = {
    where: discussionWhereUniqueInput
    create: XOR<discussionCreateWithoutUserInput, discussionUncheckedCreateWithoutUserInput>
  }

  export type booksUpsertWithWhereUniqueWithoutUserInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutUserInput, booksUncheckedUpdateWithoutUserInput>
    create: XOR<booksCreateWithoutUserInput, booksUncheckedCreateWithoutUserInput>
  }

  export type booksUpdateWithWhereUniqueWithoutUserInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutUserInput, booksUncheckedUpdateWithoutUserInput>
  }

  export type booksUpdateManyWithWhereWithoutUserInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutBooksInput>
  }

  export type discussionUpsertWithWhereUniqueWithoutUserInput = {
    where: discussionWhereUniqueInput
    update: XOR<discussionUpdateWithoutUserInput, discussionUncheckedUpdateWithoutUserInput>
    create: XOR<discussionCreateWithoutUserInput, discussionUncheckedCreateWithoutUserInput>
  }

  export type discussionUpdateWithWhereUniqueWithoutUserInput = {
    where: discussionWhereUniqueInput
    data: XOR<discussionUpdateWithoutUserInput, discussionUncheckedUpdateWithoutUserInput>
  }

  export type discussionUpdateManyWithWhereWithoutUserInput = {
    where: discussionScalarWhereInput
    data: XOR<discussionUpdateManyMutationInput, discussionUncheckedUpdateManyWithoutDiscussionInput>
  }

  export type booksCreateWithoutRatingInput = {
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_rate?: number | null
    category?: categoryCreateNestedOneWithoutBooksInput
    user?: userCreateNestedOneWithoutBooksInput
    discussion?: discussionCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutRatingInput = {
    id_books?: number
    title?: string | null
    publisher?: string | null
    author?: string | null
    ISBN?: number | null
    pages?: number | null
    description?: string | null
    cover__book?: string | null
    id_category?: number | null
    id_user?: number | null
    id_rate?: number | null
    discussion?: discussionUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutRatingInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutRatingInput, booksUncheckedCreateWithoutRatingInput>
  }

  export type booksUpsertWithoutRatingInput = {
    update: XOR<booksUpdateWithoutRatingInput, booksUncheckedUpdateWithoutRatingInput>
    create: XOR<booksCreateWithoutRatingInput, booksUncheckedCreateWithoutRatingInput>
  }

  export type booksUpdateWithoutRatingInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    category?: categoryUpdateOneWithoutBooksInput
    user?: userUpdateOneWithoutBooksInput
    discussion?: discussionUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutRatingInput = {
    id_books?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    discussion?: discussionUncheckedUpdateManyWithoutBooksInput
  }

  export type discussionUpdateWithoutBooksInput = {
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutDiscussionInput
  }

  export type discussionUncheckedUpdateWithoutBooksInput = {
    id_discussion?: IntFieldUpdateOperationsInput | number
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type discussionUncheckedUpdateManyWithoutDiscussionInput = {
    id_discussion?: IntFieldUpdateOperationsInput | number
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ratingUpdateWithoutBooksInput = {
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ratingUncheckedUpdateWithoutBooksInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ratingUncheckedUpdateManyWithoutRatingInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type booksUpdateWithoutCategoryInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    user?: userUpdateOneWithoutBooksInput
    discussion?: discussionUpdateManyWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutCategoryInput = {
    id_books?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    discussion?: discussionUncheckedUpdateManyWithoutBooksInput
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateManyWithoutBooksInput = {
    id_books?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type booksUpdateWithoutUserInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    category?: categoryUpdateOneWithoutBooksInput
    discussion?: discussionUpdateManyWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutUserInput = {
    id_books?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ISBN?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover__book?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    id_rate?: NullableIntFieldUpdateOperationsInput | number | null
    discussion?: discussionUncheckedUpdateManyWithoutBooksInput
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }

  export type discussionUpdateWithoutUserInput = {
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateOneWithoutDiscussionInput
  }

  export type discussionUncheckedUpdateWithoutUserInput = {
    id_discussion?: IntFieldUpdateOperationsInput | number
    diskusi?: NullableStringFieldUpdateOperationsInput | string | null
    id_books?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}